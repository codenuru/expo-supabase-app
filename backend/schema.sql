/**
 * PROFILES
 * Note: user profiles
 */
--
-- Clean Installation
drop table if exists public.profiles;
drop type if exists public.user_status;
--
-- Type
create type public.user_status as enum ('ONLINE', 'OFFLINE');
--
-- Table schema
-- create a table for Public Profiles
create table profiles (
  id uuid references auth.users not null,
  -- UUID from auth.users
  full_name varchar(100),
  username varchar(50),
  avatar_url text,
  website varchar(100),
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  deleted_at timestamp,
  status user_status default 'OFFLINE'::public.user_status primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);
comment on table public.profiles is 'Profile data for each user.';
comment on column public.profiles.id is 'References the internal Supabase Auth user.';
--
-- Secure the tables
alter table profiles enable row level security;
create policy "Public profiles are viewable by everyone." on profiles for
select using (true);
create policy "Users can insert their own profile." on profiles for
insert with check (auth.uid() = id);
create policy "Users can update own profile." on profiles for
update using (auth.uid() = id);
--
-- inserts a row into public.user_profiles when a user signs up
-- https://supabase.io/docs/ guides/auth#create-a-publicusers-table
drop trigger if exists on_auth_user_created on auth.users;
drop function if exists public.handle_new_user();
-- Trigger to handle new registered user
create or replace function public.handle_new_user() returns TRIGGER as $$ begin
insert into public.profiles (id)
VALUES (new.id);
return new;
end $$ language plpgsql security DEFINER;
create TRIGGER on_auth_user_created
after
insert on auth.users for each row execute procedure public.handle_new_user();
--
-- trigger for deleting userprofile when user is deleted from auth table
drop trigger if exists on_auth_user_deleted on auth.users;
drop function if exists public.handle_deleted_user();
create function public.handle_deleted_user() returns trigger as $$ begin
delete from public.profiles
where id = old.id;
return old;
end;
$$ language plpgsql security definer;
-- trigger the function every time a user is deleted
create trigger on_auth_user_deleted
after delete on auth.users for each row execute procedure public.handle_deleted_user();
--
-- Set up Realtime!
begin;
drop publication if exists supabase_realtime;
create publication supabase_realtime;
commit;
alter publication supabase_realtime
add table profiles;
-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');
create policy "Avatar images are publicly accessible." on storage.objects for
select using (bucket_id = 'avatars');
create policy "Anyone can upload an avatar." on storage.objects for
insert with check (bucket_id = 'avatars');
create policy "Anyone can update an avatar." on storage.objects for
update with check (bucket_id = 'avatars');
/**
 * RELATIONSHIPS
 * Note: user relationships
 */
--
-- Clean Installation
drop table if exists public.relationships;
--
-- Table schema
create table "relationships"(
  id bigint generated by default as identity primary key,
  follower_id uuid null,
  followed_id uuid null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
constraint "un_relationships_follower_id_followed_id" unique("follower_id", "followed_id");
constraint "fk_relationships_follower_id" foreign key("follower_id") references "profiles"("id") on delete cascade;
constraint "fk_relationships_followed_id" foreign key("followed_id") references "profiles"("id") on delete cascade;
);
create index "in_relationships_follower_id" ON "relationships"("follower_id");
create index "in_relationships_followed_id" ON "relationships"("followed_id");
